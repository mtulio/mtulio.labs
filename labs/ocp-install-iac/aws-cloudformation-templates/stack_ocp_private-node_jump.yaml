AWSTemplateFormatVersion: '2010-09-09'
Description: Deploy Bastion EC2 Instance.

Parameters:
  NamePrefix:
    AllowedPattern: ^([a-zA-Z][a-zA-Z0-9\-]{0,26})$
    MaxLength: 16
    MinLength: 1
    ConstraintDescription: Cluster name must be alphanumeric, start with a letter, and have a maximum of 27 characters.
    Description: A short, representative cluster name to use for host names and other identifying names.
    Type: String

  NameSuffix:
    Type: String
    Default: "-jump"

  TemplatesBaseURL:
    Type: String
    Description: Choose 2 Subnets to create Load balancer and ASG

  VpcId:
    Description: VPC ID to associate the Carrier Gateway.
    Type: String
    AllowedPattern: ^(?:(?:vpc)(?:-[a-zA-Z0-9]+)?\b|(?:[0-9]{1,3}\.){3}[0-9]{1,3})$
    ConstraintDescription: VPC ID must be with valid name, starting with vpc-.*.

  VpcCidr:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-4]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-24.
    Default: 10.0.0.0/16
    Description: CIDR block for VPC.
    Type: String

  AmiId:
    Description: AMI ID to provision the EC2.
    Type: String
    AllowedPattern: ^(?:(?:ami)(?:-[a-zA-Z0-9]+)?\b|(?:[0-9]{1,3}\.){3}[0-9]{1,3})$
    ConstraintDescription: Subnet ID must be with valid name, starting with ami-.*.

  SubnetId:
    Description: Base64 user data to provision the EC2.
    Type: String

  InstanceType:
    Default: "m6i.large"
    Description: Base64 user data to provision the EC2.
    Type: String

  KeyName:
    Default: "openshift-dev"
    Description: Base64 user data to provision the EC2.
    Type: String

  UserData:
    Description: Base64 user data to provision the EC2.
    Type: String

  IsPublic:
    Description: Base64 user data to provision the EC2.
    Type: String
    Default: "False"
    AllowedValues: ["True", "False"]

Resources:
  #
  # Proxy Deployment
  #
  IamRole:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Join ['/', [!Ref TemplatesBaseURL, "00_iam_role.yaml"]]
      TimeoutInMinutes: 5
      Parameters:
        NamePrefix: !Ref NamePrefix
        NameSuffix: !Ref NameSuffix
        ManagedPolicyArns: "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore"

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: !Join ['-', [!Ref NamePrefix, "proxy"]]
      Path: String
      Roles: 
        - String

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Join ['', ["Security Group for ", "jump node"]]
      SecurityGroupIngress:
      - IpProtocol: "tcp"
        FromPort: 22
        ToPort: 22
        CidrIp: !Ref VpcCidr
      SecurityGroupEgress:
      - IpProtocol: "-1"
        CidrIp: !Ref VpcCidr
      VpcId: !Ref VpcId
      Tags:
      - Key: Name
        Value: !Join ['', [!Ref NamePrefix, !Ref NameSuffix]]

  Instance:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Join ['/', [!Ref TemplatesBaseURL, "04_ec2_instance.yaml"]]
      TimeoutInMinutes: 5
      Parameters:
        NamePrefix: !Ref NamePrefix
        NameSuffix: !Ref NameSuffix
        AmiId: !Ref AmiId
        SubnetId: !Ref SubnetId
        UserData: !Ref UserData
        IamRoleArn: !GetAtt 'IamRole.Outputs.IamRoleArn'
        KeyName: !Ref KeyName
        InstanceType: !Ref InstanceType
        SecurityGroupId: !Ref SecurityGroup
        IsPublic: !Ref IsPublic
        # InstanceType: "t3.micro"
        InstanceType: "t3.medium"

Outputs:
  InstanceId:
    Description: Instance ID.
    Value: !GetAtt 'Instance.Outputs.InstanceId'
  PrivateIp:
    Description: Private IP.
    Value: !GetAtt 'Instance.Outputs.PrivateIp'
---
- name: Destroy | VPC | AWS
  debug:
    msg: "Destroy VPC triggered"
  tags: vpc

- name: VPC | AWS | Set VPC Id for Zone name
  set_fact:
    vpc_name: "{{ cloud_networks[0].name }}"
    vpc_region: "{{ cloud_networks[0].region }}"
    vpc_cidr: "{{ cloud_networks[0].block }}"
  tags: vpc

- name: VPC | AWS | Get VPC by Name
  amazon.aws.ec2_vpc_net_info:
    filters:
      "tag:Name": "{{ vpc_name }}"
  when: vpc_name is defined
  register: vpc_info
  tags: vpc

- name: VPC | AWS | Set VPC Id for Zone name
  set_fact:
    vpc_id: "{{ vpc_info.vpcs[0].vpc_id }}"
  when:
    - vpc_name is defined
    - vpc_info.vpcs|length > 0
  tags: vpc

# - name: Get all nat gateways with specific filters
#   ec2_vpc_nat_gateway_info:
#     region: "{{ vpc_region }}"
#     filters:
#       state: ['available']
#       #"tag:kubernetes.io/cluster/{{ cluster_state.infra_id }}": "owned"
#       "vpc-id": "{{ vpc_id }}"
#   register: natgws_delete
#   tags: vpc

# - debug: var=natgws_delete
#   tags: vpc

# - name: AWS | NAT GW delete
#   ec2_vpc_nat_gateway:
#     state: absent
#     region: "{{ vpc_region }}"
#     nat_gateway_id: "{{ item.nat_gateway_id }}"
#     release_eip: yes
#     wait: yes
#   with_items: "{{ natgws_delete.result }}"
#   tags: vpc

# - name: Get subnets in the VPC
#   ec2_vpc_subnet_info:
#     filters:
#       vpc-id: "{{ vpc_id }}"
#   register: ret_subnets
#   tags: vpc

# - debug: var=ret_subnets
#   tags: vpc

# - name: " AWS | Delete subnets"
#   ec2_vpc_subnet:
#     state: absent
#     region: "{{ vpc_region }}"
#     vpc_id: "{{ item.vpc_id }}"
#     cidr: "{{ item.cidr_block }}"
#     wait: true
#   with_items: "{{ ret_subnets.subnets }}"
#   tags: vpc

# - ec2_group_facts:
#     filters:
#       vpc-id: "{{ vpc_id }}"
#   register: ret_sgs
#   tags: vpc

# - debug: var=ret_sgs
#   tags: vpc

# - name: AWS | SG - delete rules
#   ec2_group:
#     state: present
#     region: "{{ vpc_region }}"
#     vpc_id: "{{ vpc_id }}"
#     name: "{{ item.group_name }}"
#     description: "To be deleted"
#     group_id: "{{ item.group_id }}"
#     rules: []
#     rules_egress: []
#   with_items: "{{ ret_sgs.security_groups }}"
#   when: item.group_name != 'default'
#   register: returned_sgs
#   tags: vpc

# - name: AWS | SG - delete
#   ec2_group:
#     state: absent
#     region: "{{ vpc_region }}"
#     vpc_id: "{{ vpc_id }}"
#     group_id: "{{ item.group_id }}"
#   with_items: "{{ ret_sgs.security_groups }}"
#   register: returned_sgs
#   when: item.group_name != 'default'
#   tags: vpc

# - name: "Delete internet gateway"
#   ec2_vpc_igw:
#     region: "{{ vpc_region }}"
#     vpc_id: "{{ vpc_id }}"
#     state: "absent"
#   with_items: "{{ vpc_info.vpcs }}"
#   tags: vpc

# - name: "Query for existing route table(s)"
#   ec2_vpc_route_table_info:
#     region: "{{ vpc_region }}"
#     filters:
#       vpc-id: "{{ vpc_id }}"
#   register: route_table_info
#   tags: vpc

# - set_fact:
#     route_tables_to_delete: "{{ (route_tables_to_delete | default([])) + [item.id] }}"
#   when: item.associations | length == 0 or not item.associations[0].main
#   loop: "{{ route_table_info.route_tables }}"
#   tags: vpc

# - name: "Purge routes"
#   ec2_vpc_route_table:
#     region: "{{ vpc_region }}"
#     vpc_id: "{{ vpc_id }}"
#     route_table_id: "{{ item }}"
#     lookup: "id"
#     purge_routes: "yes"
#     purge_subnets: "yes"
#     state: "present"
#   loop: "{{ route_tables_to_delete }}"
#   when: route_tables_to_delete is defined
#   tags: vpc

# - pause: seconds=10
#   tags: vpc

# - name: "Delete route table"
#   ec2_vpc_route_table:
#     region: "{{ vpc_region }}"
#     vpc_id: "{{ vpc_id }}"
#     route_table_id: "{{ item }}"
#     lookup: "id"
#     state: "absent"
#   loop: "{{ route_tables_to_delete }}"
#   when: route_tables_to_delete is defined
#   tags: vpc

- block:
    - include: aws-vpc-natgw.yaml
      tags: vpc

    - include: aws-vpc-sgs.yaml
      tags: vpc

    - include: aws-vpc-endpoint.yaml
      tags: vpc

    - include: aws-vpc-rtb.yaml
      tags: vpc

    - include: aws-vpc-subnets.yaml
      tags: vpc

    - include: aws-vpc-igw.yaml
      tags: vpc

    - name: AWS | VPC delete
      ec2_vpc_net:
        state: absent
        region: "{{ vpc_region }}"
        name: "{{ vpc_name }}"
        cidr_block: "{{ vpc_cidr }}"
      register: ret_vpc
      tags: vpc

    - debug: var=ret_vpc
      tags: vpc

  when:
    - (vpc_id is defined) and (vpc_id != '')
  tags: vpc

AWSTemplateFormatVersion: 2010-09-09
Description: Template for Best Practice VPC with 1-3 AZs

Parameters:
  ClusterName:
    Type: String
    Description: ClusterName used to prefix resource names
  VpcId:
    Description: VPC Id
    Type: String
  LocalZoneName:
    Description: Local Zone Name (Example us-east-1-bos-1)
    Type: String
  LocalZoneNameShort:
    Type: String
  PublicRouteTable:
    Type: String
  PublicSubnetCidr:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-4]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-24.
    Default: 10.0.128.0/20
    Description: CIDR block for Public Subnet
    Type: String

Resources:
  PublicSubnet:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref VpcId
      CidrBlock: !Ref PublicSubnetCidr
      AvailabilityZone: !Ref LocalZoneName
      Tags:
      - Key: Name
        Value: !Join
          - ""
          - [ !Ref ClusterName, "-public-", !Ref LocalZoneNameShort, "-1" ]
          #- [ !Ref ClusterName, "-public-", !Split [ "-" , !Ref LocalZoneNameShort ][3], "-1" ]
      - Key: kubernetes.io/cluster/unmanaged
        Value: "owned"

  PublicSubnetRouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable

  # PrivateSubnet:
  #   Type: "AWS::EC2::Subnet"
  #   Properties:
  #     VpcId: !Ref VpcId
  #     CidrBlock: !Ref PrivateSubnetCidr
  #     AvailabilityZone: !Ref LocalZoneName
  #     Tags:
  #     - Key: Name
  #       Value: !Join [ "", [ !Ref ClusterName, "-private-", !Ref LocalZoneNameShort, "-1" ] ]
  #     #- Key: kubernetes.io/role/internal-elb
  #     #  Value: 0

  # PrivateRouteTable:
  #   Type: "AWS::EC2::RouteTable"
  #   Properties:
  #     VpcId: !Ref VpcId
  #     Tags:
  #     - Key: Name
  #       Value: !Join [ "", [ !Ref ClusterName, "-rtb-private-", !Ref LocalZoneNameShort, "-1" ] ]
  # PrivateSubnetRouteTableAssociation:
  #   Type: "AWS::EC2::SubnetRouteTableAssociation"
  #   Properties:
  #     SubnetId: !Ref PrivateSubnet
  #     RouteTableId: !Ref PrivateRouteTable
  # NAT:
  #   Type: "AWS::EC2::NatGateway"
  #   Properties:
  #     AllocationId:
  #       "Fn::GetAtt":
  #       - EIP
  #       - AllocationId
  #     SubnetId: !Ref PublicSubnet
  #     Tags:
  #     - Key: Name
  #       Value: !Join [ "", [ !Ref ClusterName, "-natgw-private-", !Ref LocalZoneNameShort, "-1" ] ]
  # EIP:
  #   Type: "AWS::EC2::EIP"
  #   Properties:
  #     Domain: vpc
  #     Tags:
  #     - Key: Name
  #       Value: !Join [ "", [ !Ref ClusterName, "-natgw-private-", !Ref LocalZoneNameShort, "-1" ] ]
  # Route:
  #   Type: "AWS::EC2::Route"
  #   Properties:
  #     RouteTableId:
  #       Ref: PrivateRouteTable
  #     DestinationCidrBlock: 0.0.0.0/0
  #     NatGatewayId:
  #       Ref: NAT

Outputs:
  PublicSubnetIds:
    Description: Subnet IDs of the public subnets.
    Value:
      !Join [
        "",
        [!Ref PublicSubnet]
      ]
  # PrivateSubnetIds:
  #   Description: Subnet IDs of the private subnets.
  #   Value:
  #     !Join [
  #       "",
  #       [!Ref PrivateSubnet]
  #     ]
